import * as asy from 'async';
import * as inquirer from 'inquirer';
import * as prettier from 'prettier';
import { resolve } from 'path';
import { arrayToObject, awaitHelper, ChoiceBox, Logger, PackageJSON, photinia, Template } from './utils';
import * as sh from 'shelljs';

async function importation(
    template: Template,
    templatePackageInfo: PackageJSON,
    packageFile: PackageJSON,
): Promise<void> {
    let choiceBox: ChoiceBox = {
        files: [],
        devDependencies: [],
        scripts: [],
    };

    // 询问是否导入全部文件
    const [promptErr, promptRes] = await awaitHelper(
        inquirer.prompt([
            {
                type: 'confirm',
                name: 'all',
                message: 'Import all files and configurations from the template?',
            },
        ]),
    );

    if (promptErr) {
        Logger.throw(promptErr);
    }

    // 转换内容为提问时用到的数组
    choiceBox.files = [...template.fileMap].map((val) => val[0]);
    choiceBox.devDependencies = Object.entries(templatePackageInfo.devDependencies).map(
        (val) => `${val[0]} --- ${val[1]}`,
    );
    choiceBox.scripts = Object.entries(templatePackageInfo.scripts).map((val) => `${val[0]} --- ${val[1]}`);

    if (!promptRes.all) {
        const messages: Readonly<string[]> = ['files', 'devDependencies', 'scripts'];
        const [selectErr, selectRes] = await awaitHelper<ChoiceBox>(
            inquirer.prompt(
                messages.map((val) => ({
                    type: 'checkbox',
                    name: val,
                    message: `Please select the ${val} you want to import`,
                    choices: choiceBox[val],
                    loop: false,
                })),
            ),
        );

        if (selectErr) {
            Logger.throw(selectErr);
        } else if (!selectRes) {
            Logger.throw('Unknown error');
        }

        choiceBox = selectRes;
    }

    // 导入文件
    asy.each(
        choiceBox.files,
        (item, callback) => {
            const path = resolve(`${photinia}/templates`, item);
            const out = template.fileMap.get(item);
            if (!out) {
                Logger.throw(`Could not get output path!`);
            }

            let result: sh.ShellString = new sh.ShellString('Default string.');

            if (sh.test('-d', path)) {
                result = sh.cp('-r', path, out);
            } else if (sh.test('-f', path)) {
                result = sh.cp(path, out);
            } else {
                callback(new Error(`Could not find file ${item}`));
            }

            if (result.code) {
                callback(new Error(result.stderr));
            } else {
                Logger.info(`Imported: ${path}`);
                callback();
            }
        },
        (err) => {
            if (err) {
                Logger.err(err);
                Logger.throw('Error in excuting asy.each() method...');
            } else {
                Logger.newLine(1);
                configurePackageFile();
            }
        },
    );

    function configurePackageFile() {
        Logger.info('Configuring package.json...');
        const devDependencies = arrayToObject(choiceBox.devDependencies);
        const scripts = arrayToObject(choiceBox.scripts);

        const result = sh.echo(
            prettier.format(JSON.stringify({ ...packageFile, ...{ devDependencies, scripts } }), {
                parser: 'json-stringify',
            }),
        );

        if (result.code) {
            Logger.throw(result.stderr);
        } else {
            result.to('package.json');
            Logger.done('Whoo! Your project is already generated by Photinia.');
        }
    }
}

export { importation as importTemplate };
